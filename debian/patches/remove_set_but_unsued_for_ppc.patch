diff -urpN a/gdb-7.0.patch b/gdb-7.0.patch
--- a/gdb-7.0.patch	2011-08-24 11:17:50.000000000 -0600
+++ b/gdb-7.0.patch	2011-08-24 11:19:50.000000000 -0600
@@ -1685,3 +1685,70 @@
  	      add_symbol_to_list (sym, &global_symbols);
  	    }
  	  child_die = sibling_die (child_die);
+--- gdb-7.0/bfd/coff-rs6000.c.orig
++++ gdb-7.0/bfd/coff-rs6000.c
+@@ -3068,7 +3068,7 @@ xcoff_complain_overflow_bitfield_func (i
+      bfd_vma relocation;
+      struct reloc_howto_struct *howto;
+ {
+-  bfd_vma addrmask, fieldmask, signmask, ss;
++  bfd_vma fieldmask, signmask, ss;
+   bfd_vma a, b, sum;
+ 
+   /* Get the values to be added together.  For signed and unsigned
+@@ -3076,7 +3076,6 @@ xcoff_complain_overflow_bitfield_func (i
+      the size of an address.  For bitfields, all the bits matter.
+      See also bfd_check_overflow.  */
+   fieldmask = N_ONES (howto->bitsize);
+-  addrmask = N_ONES (bfd_arch_bits_per_address (input_bfd)) | fieldmask;
+   a = relocation;
+   b = val & howto->src_mask;
+ 
+--- gdb-7.0/bfd/coffcode.h.orig
++++ gdb-7.0/bfd/coffcode.h
+@@ -3946,6 +3946,10 @@ coff_write_object_contents (bfd * abfd)
+     internal_f.f_flags |= F_LNNO;
+   if (abfd->flags & EXEC_P)
+     internal_f.f_flags |= F_EXEC;
++  // noop to shutup gcc's Werror=unused-but-set-variable 
++  // the optimizer should nuke this code
++  if (! hasdebug)
++	hasdebug = hasdebug;
+ #ifdef COFF_IMAGE_WITH_PE
+   if (! hasdebug)
+     internal_f.f_flags |= IMAGE_FILE_DEBUG_STRIPPED;
+--- gdb-7.0/bfd/elf32-ppc.c.orig
++++ gdb-7.0/bfd/elf32-ppc.c
+@@ -4735,7 +4735,6 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUT
+ 		    }
+ 		  else
+ 		    {
+-		      Elf_Internal_Sym *sym;
+ 		      bfd_signed_vma *lgot_refs;
+ 		      struct plt_entry **local_plt;
+ 		      char *lgot_masks;
+@@ -4754,7 +4753,6 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUT
+ 			      return FALSE;
+ 			    }
+ 			}
+-		      sym = locsyms + r_symndx;
+ 		      lgot_refs = elf_local_got_refcounts (ibfd);
+ 		      if (lgot_refs == NULL)
+ 			abort ();
+@@ -5941,7 +5939,7 @@ ppc_elf_relax_section (bfd *abfd,
+   for (irel = internal_relocs; irel < irelend; irel++)
+     {
+       unsigned long r_type = ELF32_R_TYPE (irel->r_info);
+-      bfd_vma reladdr, toff, roff;
++      bfd_vma toff, roff;
+       asection *tsec;
+       struct one_fixup *f;
+       size_t insn_offset = 0;
+@@ -6125,7 +6123,6 @@ ppc_elf_relax_section (bfd *abfd,
+ 	continue;
+ 
+       roff = irel->r_offset;
+-      reladdr = isec->output_section->vma + isec->output_offset + roff;
+ 
+       /* If the branch is in range, no need to do anything.  */
+       if (tsec != bfd_und_section_ptr
